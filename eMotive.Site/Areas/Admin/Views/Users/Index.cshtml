@using Extensions
@using eMotive.Models.Objects.Users
@using eMotive.FoL.Common.Helpers
@using Omu.ValueInjecter
@model UserSearch
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@section Crumbs
{
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Home", new { area = "Admin" })">Home</a> <span class="divider">/</span>
        </li>
        <li class="active">Users
        </li>
    </ul>
}
<div class="page-header">
    <h2>User Administration</h2>
    <div class="row-fluid">

        @using (Html.BeginForm("Index", "Users", new { area = "Admin" }, FormMethod.Post, new { @class = "form-search pull-right" }))
        {
            @Html.HiddenFor(m => m.Page)
            @Html.HiddenFor(m => m.PageSize)
            @Html.HiddenFor(m => m.NumberOfResults)
            <div class="input-append">
                @Html.TextBoxFor(m => m.Query, new { @class = "search-query", placeholder = "Search users..." })

                <button type="submit" class="btn btn-inverse">
                    Search <i class="icon-search icon-white"></i>
                </button>
            </div>
            <a href="@Url.Action("Index")" class="btn btn-inverse">Clear <i class="icon-remove icon-white"></i></a>
        }
    </div>
</div>
<div  style="margin: 10px;"><a href="@Url.Action("Create")" class="btn">Create User</a></div>
@if (!Model.Users.HasContent())
{
    <div class='alert alert-info'>No users could be found.</div>
}
else
{
    @Html.HiddenFor(n => n.ItemType)
    <table class="table table-bordered table-striped table-hover data-table">
        <thead>
            <tr>
                <th>Role</th>
                <th>Username</th>
                <th>Forename</th>
                <th>Surname</th>
                <th>Email</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var user in Model.Users)
            {
                <tr>
                    <td>
                        @{
                            var role = user.Roles.First();
                            @Html.Raw(string.Format("<span class='label label-info' style='background-color:#{0}'>{1}</span>", role.Colour, role.Name))
                        }
                    </td>
                    <td>@user.Username</td>
                    <td>@user.Forename</td>
                    <td>@user.Surname</td>
                    <td>@user.Email</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn">Actions</button>
                            <button class="btn dropdown-toggle" data-toggle="dropdown">
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a href="@Url.Action("Edit", new {username = user.Username})">Edit User</a></li>
                                <li><a href="#" onclick="UserActions.FetchEmailLog('@user.Username','@user.Forename','@user.Surname')">View Emails Sent</a></li>
                                <li><a href="#" onclick="UserActions.FetchSessionLog('@user.Username','@user.Forename','@user.Surname')">View Interview Sessions</a></li>
                                <li><a href="#" onclick="UserActions.ResendAccountCreationEmail('@user.Username')">Resend Account Information Email</a></li>
                                @if (user.Roles.Any(n => n.Name == "Applicant"))
                                {
                                    <li>@Html.ActionLink("Create Applicant Letter", "GenerateApplicantLetter", "Users", new {area = "admin", username = user.Username}, null)</li>
                                    <li><a href="#" onclick="UserActions.FetchApplicantData('@user.Username')">View Applicant Details</a></li>
                                }
                                <li><a href="#" onclick="UserActions.DeleteRecord('@user.Username')"><span class="label label-important">Delete User</span></a></li>
                            </ul>

                        </div>
                    </td>

                </tr>
            }

        </tbody>

    </table>
    @Html.PageLinks(Model, i => Url.Action("Index", new { page = i }))

    <div class="modal hide fade" id="EmailLog">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Email Log</h3>
        </div>
        <div class="modal-body">
            <div class="alert alert-info" id="EmailLogMessage"></div>
            <table id="EmailLogTable" class="table table-bordered table-striped table-condensed">
                <thead><tr><th>Email</th><th>Sent</th></tr></thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn" data-dismiss="modal">Close</button>
        </div>
    </div>

    <div class="modal hide fade" id="ApplicantDetails">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Applicant Details</h3>
        </div>
        <div class="modal-body">
            <div id="ApplicantDetailsInformation"></div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn" data-dismiss="modal">Close</button>
        </div>
    </div>
    
    <div class="modal hide fade" id="SessionLog">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Session Log</h3>
        </div>
        <div class="modal-body">
            <div class="alert alert-info" id="SessionlogInformation"></div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn" data-dismiss="modal">Close</button>
        </div>
    </div>
    
    <div class="modal hide fade" id="DeleteModal">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Delete User</h3>
    </div>
    <div class="modal-body">
        <div id="DeleteError" class="alert alert-error fade in">
            <strong>Error!</strong> <span id="DeleteErrorMessage">An error occured!</span>
        </div>
        <input type="hidden" id="DeleteID"/>
        <p id="DeleteMessage"></p>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-danger" id="ConfirmDelete">Yes, Delete</button>
    </div>
</div>
}

@section Scripts
{
    <script>
        $(function() {
            $("#ConfirmDelete").click(function() {

                alert($("#DeleteID").val());
                /* Ajax.DoQuery(window.Routes.URL("DeleteUser"),
                    function(data) {
                        if (data.success) {

                            $("#" + id).remove();
                            $("#DeleteModal").modal('toggle');

                        } else {
                            var html = "";
                            $.each(data.message, function(key, value) {
                                html += "<p>" + value + "</p>";
                            });
                            $("#DeleteErrorMessage").html(html);
                            $("#DeleteError").show();
                        }
                    },
                    { ID: id, Username: username, Forename: forename, Surname: surname, Email: email, Enabled: enabled, Archived: archived, RoleString: JSON.stringify(roles) });*/
            });
        });
        
        var UserActions = (function() {
            var fetchEmailLog = function(_username, _forename, _surname) {
                Ajax.DoQuery(window.Routes.URL("FetchEmailSentLog"),
                    function(data) {
                        var html;
                        $.each(data.results, function(key, value) {
                            html += "<tr><td>" + value.EmailKey + "</td><td>" + moment(value.DateSent).format("dddd, MMMM Do YYYY, h:mm:ss a") + "</td></tr>";
                        });
                        $("#EmailLogMessage").text("Email log for " + _forename + " " + _surname + " (" + _username + ").");
                        $("#EmailLogTable > tbody").empty();
                        $("#EmailLogTable > tbody:last").append(html);
                        $("#EmailLog").modal('toggle');
                    },
                    { username: _username });
            };
            var viewInterviewSessions = function (_username, _forename, _surname)
            {
                Ajax.DoQuery(window.Routes.URL("FetchApplicantSignups"),
                function(data) {
                    if (data.success == "False") {
                        Ajax.DisplayError(data.message, "Error");
                    } else {
                        if (data.results.HasSignedUp == false) {
                            $("#SessionlogInformation").text(_forename + " " + _surname + " (" + _username + ") has not signed up to any interview dates.");
                        } else {
                            $("#SessionlogInformation").text(moment(data.results.SignUpDate).format("dddd, MMMM Do YYYY") + " at " + data.results.SignUpDetails);
                        }
                    }
                }, { username: _username });
                
                $("#SessionLog").modal('toggle');
            };

            var resendAccountCreationEmail = function(_username) {
                Ajax.DoQuery(window.Routes.URL("ResendAccountCreationEmail"),
                    function(data) {
                        if (data.success == "False") {
                            Ajax.DisplayError("The account creation email was not sent", "Error");
                        }
                    }, { username: _username });
            };

            var deleteRecord = function(username) {
                $("#DeleteID").val(username);
                $("#DeleteMessage").html("Are you sure you wish to delete the account of '" + username + "'?");
                $('#DeleteError').hide();
                $("#DeleteModal").modal({ show: true });
            };

            var fetchApplicantData = function (_username) {
                
                Ajax.DoQuery(window.Routes.URL("FetchApplicantData"),
                function(data) {
                    if (data.success == "False") {
                        Ajax.DisplayError(data.message, "Error");
                    } else {
                        alert("here");
                    }
                }, { username: _username });
            };

            return {
                FetchEmailLog: fetchEmailLog,
                FetchSessionLog: viewInterviewSessions,
                ResendAccountCreationEmail: resendAccountCreationEmail,
                DeleteRecord: deleteRecord,
                FetchApplicantData: fetchApplicantData
            };
        })();
    </script>
}
